// Code generated by go-bindata. DO NOT EDIT.
// sources:
// web/templates/account.html (1.61kB)
// web/templates/error.html (128B)
// web/templates/index.html (151B)
// web/templates/partials/footer.html (42B)
// web/templates/partials/header.html (397B)
// web/templates/playlist.html (571B)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAccountHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x51\x6b\xa4\x30\x14\x85\xdf\xfb\x2b\x0e\x79\xef\x64\x74\x4a\x1f\x16\xc7\x97\x6d\x0b\x5d\x4a\x77\xa1\x2d\x85\x7d\x8b\x7a\xad\xa1\x6a\xa6\x31\x96\x0e\x92\xff\xbe\x68\x32\xb3\xce\xa2\x32\xfb\x96\x48\xce\x77\x4f\xee\x0d\xc7\xae\x43\x46\xb9\xac\x09\x4c\xa4\xa9\x6a\x6b\xc3\x70\x69\xed\x45\xd7\xc1\x50\xb5\x2b\x85\x21\xb0\x82\x44\x46\x9a\xc1\xda\x0b\x20\x4a\x54\xb6\x8f\x2f\x00\x20\x2a\x82\xf8\x95\xca\x54\x55\x84\xae\xc3\xea\xa5\x21\xbd\xba\x91\xcd\xae\x14\xfb\x47\x51\x11\xac\x8d\x78\x11\xf8\xc3\xb9\xd2\x15\x44\x6a\xa4\xaa\xb7\x8c\xfb\x6a\x0d\x3f\x0a\xef\x6f\x60\x2d\x43\x45\xa6\x50\xd9\x96\xfd\xfa\xf9\xf4\xcc\x9c\x14\x88\x32\xf9\x79\x58\x03\x51\x29\x12\x2a\x91\x2b\xbd\x65\xb9\xa6\x8f\x96\xea\x74\xcf\xe2\xbb\xc3\x32\xe2\xc3\x81\x91\xa0\xa1\x92\x52\x03\x99\x8d\x05\xa8\x45\x45\x27\x84\xa3\x00\x88\xd4\xae\x77\x8a\x4f\x51\xb6\xb4\x65\x41\xc8\xba\x0e\x32\x07\x7d\x60\x75\x2c\x84\x20\x84\xb5\x70\x74\xca\xba\x0e\x54\x67\xb0\x36\xbe\xfd\x24\xbd\x47\xa5\x6a\x53\x44\xdc\x91\x16\xe0\x57\x93\xec\xab\x25\xf4\xc6\xc1\x9b\x33\xe8\xd3\xce\x17\x8d\x5f\x9f\x4f\x0f\xa6\xfb\xb2\x44\x0f\xc2\x59\x7c\xc4\x9d\xe8\x38\x77\x3e\x1a\xfc\xfc\x23\x28\x65\x25\x0d\x8b\x1f\xdb\x2a\x21\x0d\x95\xc3\x68\x91\xbe\x37\x8b\xef\xc0\x69\xfc\x1b\xf0\x80\x85\x6b\xae\x47\xf7\x7c\xee\xe9\x0f\xbd\x04\xc1\x7a\xfa\xa6\xc1\xfa\x9c\xc9\xcc\x40\xc3\x19\x68\x78\x0e\x74\x33\x03\xdd\xcc\x40\x37\x13\xd0\xff\x19\x83\xac\x77\xad\x81\xd9\xef\x68\xcb\xd2\x82\xd2\xf7\x44\x7d\xb1\xa1\xc3\x54\x09\x59\x1e\x3a\xec\x37\xde\xa4\xdb\x39\x9f\xab\x57\x69\x8a\xdb\xfe\x03\xac\x1d\x08\x23\x7b\xe0\xd3\x13\x77\x80\xf8\xbb\xaa\x73\xa9\x2b\x31\x34\x60\xf8\xf6\xcf\xcc\x4f\x9d\x8f\xbd\x36\x6d\x32\x3c\x00\xef\xe8\xc9\x6f\x7d\xbd\x88\xf7\x71\xe5\xd7\x63\x84\x40\xa1\x29\xdf\x32\x5e\xaa\x37\xd5\x1a\x16\x3f\xa8\x37\xa8\xd6\x44\x5c\x1c\x94\xc7\xe3\xee\x7e\xb5\x32\x58\x3d\xd2\x97\x59\xdd\x37\xbf\x49\xab\x21\x5f\xe7\xb9\x33\xc1\xc8\xdb\xba\x69\x93\x26\xd5\x32\x21\x16\xbf\xfc\xdd\x4c\x15\x8e\x8a\x30\xee\x2b\xa2\x4f\xe2\x52\x36\xe6\xdb\x90\xcf\x83\x89\x3b\xd5\xf7\x0b\x2c\xc4\x0f\x51\x23\x5c\xaf\xaf\x99\xcb\xe9\xf0\x60\xfa\xd2\xf7\xbe\x0f\x7b\xee\xd2\xfe\xe4\x77\x90\x2b\x65\xfc\xef\x60\x74\xf8\x4f\x00\x00\x00\xff\xff\xf2\xe7\x72\x97\x4a\x06\x00\x00")

func templatesAccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAccountHtml,
		"templates/account.html",
	)
}

func templatesAccountHtml() (*asset, error) {
	bytes, err := templatesAccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/account.html", size: 1610, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x35, 0xa9, 0x88, 0x99, 0x62, 0xa1, 0xde, 0xf2, 0x4c, 0xff, 0xfb, 0xec, 0x14, 0xef, 0x12, 0x45, 0xdf, 0x8f, 0x8e, 0x5a, 0x6, 0xb5, 0x73, 0x5e, 0xd, 0x8e, 0x86, 0xce, 0xc7, 0x7b, 0xec}}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\x64\x5f\x4b\xf7\xa1\x37\xf0\x10\x91\x4c\x8d\xa0\x8d\xbc\x66\x23\xc3\xbb\xbb\x04\xdd\x74\x37\x30\x3f\x9f\x84\xc2\xed\xb1\x13\x91\x66\xcd\x22\x26\xf7\x20\xa1\xf3\xf5\x7e\xe6\x4e\xc4\xca\x5c\x68\x11\xee\x01\x48\xb7\x56\x3e\x6b\x00\x80\x54\x97\x55\xc2\xe5\xca\xe3\xc8\x77\xc2\x3d\xcd\x75\x19\x5f\x9a\x7f\xd5\x89\xd9\x5a\xeb\x7f\x46\x9a\xc0\xbd\x8c\xf9\x0d\x00\x00\xff\xff\xa4\xea\xe5\xf4\x80\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 128, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xc3, 0x9d, 0xa5, 0xb1, 0x91, 0x8, 0x40, 0xac, 0x6, 0x3c, 0x30, 0x29, 0xd1, 0x5a, 0xb, 0x83, 0xce, 0xea, 0x53, 0xe2, 0x59, 0xd0, 0x8d, 0x2f, 0x79, 0xef, 0x43, 0xa8, 0x3a, 0x2d, 0xcc}}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x31\x0a\xc3\x30\x10\x04\x7b\xbd\x62\xb9\xde\x08\xf7\x8a\xfa\x40\x3e\xa1\xa0\x93\x25\x70\xee\x82\x51\x91\x70\xe8\xef\x41\xc4\x8d\xbb\x65\x87\x19\x33\x64\x2e\x4d\x18\xd4\x24\xf3\x87\xb0\x8c\xe1\xcc\xd0\xf9\xf5\xde\x53\x67\x50\xe5\x94\xf9\x20\x8c\xe1\x80\xf0\xd4\xfc\x8d\x0e\x00\x42\x5d\xe3\x7d\x3a\xc1\xd7\xf5\xbc\x12\xea\xc1\xe5\x46\x7e\xd7\xad\x09\xc5\x87\x6e\x68\x12\x7c\x9a\x3c\xf8\xbf\x7c\xa9\x17\xd5\x7e\xd6\xcd\x16\xb0\xe4\x39\x7f\x01\x00\x00\xff\xff\x8d\xdd\x33\xe2\x97\x00\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 151, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x1c, 0xd4, 0x3c, 0xec, 0xa, 0x70, 0x30, 0x2e, 0x14, 0x94, 0x93, 0x1a, 0x45, 0x2, 0xf2, 0xcb, 0x29, 0x89, 0xb3, 0x5b, 0x84, 0x68, 0xf9, 0xe4, 0x45, 0xb6, 0xf0, 0x31, 0xf0, 0x99, 0x19}}
	return a, nil
}

var _templatesPartialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xd0\xad\xad\xe5\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\xd6\x55\x48\xcd\x4b\x51\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd5\x0e\x34\x31\x2a\x00\x00\x00")

func templatesPartialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterHtml,
		"templates/partials/footer.html",
	)
}

func templatesPartialsFooterHtml() (*asset, error) {
	bytes, err := templatesPartialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.html", size: 42, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xcf, 0xc, 0x12, 0x96, 0x7c, 0xb2, 0x83, 0x2d, 0xaa, 0xaa, 0x23, 0x0, 0xdf, 0xbf, 0xe3, 0x21, 0xbe, 0x88, 0xe5, 0x75, 0x90, 0xa2, 0xba, 0xe1, 0x9c, 0x31, 0xc1, 0x3a, 0x75, 0xf2, 0x64}}
	return a, nil
}

var _templatesPartialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xbb\x4e\xf4\x40\x0c\x85\xfb\x3c\x85\x7f\xb7\x3f\xc9\x40\x87\x50\x66\x29\xb8\x94\x80\xb4\x4b\x41\x39\x9a\x38\x3b\x16\x13\x4f\x94\xf1\x5e\xa2\x28\xef\x8e\xb2\x29\x40\xa2\xa0\xb2\x8f\xbe\xe3\x63\xd9\xd3\x04\x0d\xb5\x2c\x04\x18\xc8\x35\x34\x20\x94\xf3\x5c\xd4\xff\x1e\x5f\x1f\x76\x1f\x6f\x4f\x10\xb4\x8b\x9b\xa2\x5e\x0a\x44\x27\x7b\x8b\x24\xb8\x29\x00\xea\xc5\xbf\x34\x00\x75\x47\xea\xc0\x07\x37\x64\x52\x8b\xef\xbb\xe7\xf2\x16\xc1\xfc\x84\xe2\x3a\xb2\x78\x64\x3a\xf5\x69\x50\x04\x9f\x44\x49\xd4\xe2\x89\x1b\x0d\xb6\xa1\x23\x7b\x2a\x2f\xe2\x0a\x58\x58\xd9\xc5\x32\x7b\x17\xc9\xde\x54\xd7\xdf\x61\xca\x1a\x69\xb3\xed\xdd\x41\x53\x3b\xd6\x66\xd5\x2b\x8b\x2c\x9f\x10\x06\x6a\x2d\x06\xd5\x3e\xdf\x19\xd3\x26\xd1\x5c\xed\x53\xda\x47\x72\x3d\xe7\xca\xa7\xce\xf8\x9c\xef\x5b\xd7\x71\x1c\xed\xcb\x41\x58\xd3\xff\xad\x93\x8c\x30\x50\xb4\x98\x75\x8c\x94\x03\x91\x22\xe8\xd8\x93\x45\xa5\xb3\x2e\x33\xf8\x7b\x8d\xc9\xea\x94\xfd\x42\x0d\x4b\x43\xe7\x6a\xf1\xfd\x19\x74\x39\xa6\x36\xeb\x03\xa7\xa9\x04\x92\x06\xe6\xb9\xf8\x0a\x00\x00\xff\xff\x36\x5e\xf5\xfc\x8d\x01\x00\x00")

func templatesPartialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderHtml,
		"templates/partials/header.html",
	)
}

func templatesPartialsHeaderHtml() (*asset, error) {
	bytes, err := templatesPartialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.html", size: 397, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x6c, 0xdb, 0x55, 0xb0, 0xc9, 0x63, 0x8, 0xa2, 0x78, 0x32, 0x5b, 0xf6, 0xa4, 0x84, 0x6b, 0xf6, 0x48, 0x31, 0xbb, 0x32, 0x6f, 0xbf, 0x86, 0x8c, 0xa8, 0xf6, 0x97, 0x97, 0xdc, 0xbc, 0x37}}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xcd\x6a\x84\x30\x10\xbe\xef\x53\x7c\xe4\xbe\x86\xbd\x47\xa1\xb4\x97\x42\x69\x0b\xdd\x3e\x40\x34\x63\x0d\xab\x89\xc4\xb8\x74\x09\x79\xf7\x62\xd4\xad\xee\x6d\x98\x99\xef\x67\xbe\x09\x01\x8a\x6a\x6d\x08\xac\x6f\xe5\xad\xd5\x83\x67\x38\xc6\x78\x08\x01\x9e\xba\xbe\x95\x9e\xc0\x1a\x92\x8a\x1c\x43\x8c\x07\x40\x94\x56\xdd\x8a\x03\x00\x88\xe6\x54\x84\x80\xec\x5d\x76\x84\x18\x05\x6f\x4e\xf3\x20\x04\xe8\x1a\xd9\x9b\x36\x97\xc4\x96\x96\x25\x1a\x47\x75\xce\x26\x44\x9a\xc4\xc8\x8a\x54\x78\x8b\x55\x5d\x70\xb9\x52\x1c\x41\x46\x61\x45\xd7\xd6\x75\x90\x95\xd7\xd6\xe4\x8c\xcb\xaa\xb2\xa3\xf1\x03\x9f\xc8\xbe\x07\x72\xaf\x2f\x88\x91\xaf\x2c\x73\x7f\xb1\xc5\xd0\x91\x6f\xac\xca\xd9\xe7\xc7\xd7\x99\xfd\xd3\x3b\x69\x7e\x08\xd9\xd9\xc9\xea\x32\xac\x42\x80\x50\xfa\x5a\x2c\x35\x20\xb4\xe9\x47\x0f\x7f\xeb\x29\x67\x55\x43\xd5\xa5\xb4\xbf\x0c\x5a\xcd\x87\x24\x5d\x06\x23\x3b\xda\x35\xae\xb2\x1d\xf7\x9d\x84\x25\xc5\x37\xd4\xad\x2c\xa9\x45\x6d\xdd\x76\x71\x9b\x28\x8e\x53\x94\xd9\x93\xf3\xd3\x51\x29\xe2\x84\x59\x39\x04\xbf\x7b\x7d\xc8\xeb\xc1\xf8\x30\x96\x9d\xf6\x77\x5b\xcf\x8e\xa4\x27\x86\xc5\x8c\xe0\x53\xba\x53\x2d\xf8\xfc\xdd\xdd\xfb\x6b\x6b\xfd\xf2\xfe\x8d\xca\x5f\x00\x00\x00\xff\xff\x84\xbe\x37\x6c\x3b\x02\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 571, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0xbc, 0x4f, 0x87, 0x7a, 0x96, 0xfa, 0x1c, 0x96, 0x89, 0xb1, 0x82, 0x81, 0x20, 0xe6, 0xe9, 0x8b, 0xa6, 0x1b, 0x3, 0xc8, 0x8b, 0xd4, 0x54, 0x76, 0x49, 0x99, 0x2, 0x4d, 0x8f, 0xf, 0x35}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/account.html":         templatesAccountHtml,
	"templates/error.html":           templatesErrorHtml,
	"templates/index.html":           templatesIndexHtml,
	"templates/partials/footer.html": templatesPartialsFooterHtml,
	"templates/partials/header.html": templatesPartialsHeaderHtml,
	"templates/playlist.html":        templatesPlaylistHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"account.html": &bintree{templatesAccountHtml, map[string]*bintree{}},
		"error.html":   &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html":   &bintree{templatesIndexHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{templatesPartialsFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{templatesPartialsHeaderHtml, map[string]*bintree{}},
		}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
