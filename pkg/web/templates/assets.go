// Code generated by go-bindata. DO NOT EDIT.
// sources:
// web/templates/account.html (1.161kB)
// web/templates/error.html (128B)
// web/templates/index.html (151B)
// web/templates/partials/footer.html (42B)
// web/templates/partials/header.html (397B)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAccountHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x51\x6b\xdb\x30\x14\x85\xdf\xf3\x2b\x0e\x7a\xaf\x55\x7b\xa5\x0f\x43\xf1\xcb\xda\x42\xc7\xe8\x06\x5d\x29\xec\x4d\xb6\xaf\x6b\x31\x5b\x4a\x6d\x39\x34\x08\xfd\xf7\x61\xc9\x4d\x93\xe1\x64\x7b\x93\xc4\x3d\x9f\x0e\xf7\xea\xc8\x39\x54\x54\x2b\x4d\x60\xb2\x2c\xcd\xa8\x2d\xc3\x85\xf7\x2b\xe7\x60\xa9\xdb\xb4\xd2\x12\x58\x43\xb2\xa2\x9e\xc1\xfb\x95\x28\x4c\xb5\xcb\x57\x80\x68\xd2\xfc\x99\xda\xd2\x74\x04\xe7\x90\x3c\x0d\xd4\x27\x37\x6a\xd8\xb4\x72\xf7\x20\x3b\x82\xf7\x82\x37\x69\x28\xad\x4d\xdf\x41\x96\x56\x19\xbd\x66\x7c\xbe\x87\xef\x55\xf7\x37\xf0\x9e\xa1\x23\xdb\x98\x6a\xcd\x7e\x7c\x7f\xfc\xc9\x26\x1d\x20\x2a\xb5\x8d\x2b\x40\xb4\xb2\xa0\x16\xb5\xe9\xd7\xac\xee\xe9\x75\x24\x5d\xee\x58\x7e\xf7\xbe\x14\x3c\x14\xec\xcb\x07\x6a\xa9\xb4\x50\xd5\x61\x39\xb4\xec\xe8\x48\x3f\x97\x03\xc2\x6c\x26\x83\xd8\xca\x76\xa4\x35\x4b\x33\xe6\x1c\x54\x0d\x7a\x45\xb2\xbf\x04\x69\x06\xef\x11\xd9\x54\x39\x07\xd2\x15\xbc\xcf\x6f\xb7\xd4\xef\xd0\x19\x6d\x1b\xc1\x23\xe9\x24\xfa\x6a\x91\x7c\x75\x0e\xfc\x29\xa2\x87\x7f\xb2\x97\x5d\x9f\x35\x7d\xfd\xbf\xec\x74\xb9\x23\xe7\xd8\x69\x76\x02\x2e\x78\x94\xcc\x73\xe6\xfb\x41\x1f\x8d\x5c\xe9\xcd\x68\x61\x77\x1b\x5a\xb3\xb2\xa1\xf2\x77\x61\xde\x58\x18\x29\x75\x52\xb5\xef\xe3\x9c\x37\xb3\xcd\xb8\x8b\x56\x93\x67\x65\x9b\xdb\xe9\x00\xde\x07\xc2\x81\x47\xf0\xa5\xb7\x15\xe5\xf9\x17\xa3\x6b\xd5\x77\x32\x34\x20\x9c\x1d\x3d\xb0\x43\xc7\x87\x2e\x87\xb1\xe8\x94\xdd\x7b\x79\x9c\xb7\xe1\x26\xc1\xa7\x20\x84\xd5\x87\x58\xa2\xe9\xa9\x3e\x19\x0b\x3e\xea\x61\x2c\x86\xb2\x57\x05\xb1\xfc\xe9\x63\x23\xb8\x8c\xcc\x19\xb5\x84\x6c\xcd\x8b\x19\x2d\xcb\xbf\x99\x17\x98\xd1\xfe\x2d\x89\x2d\xd2\xc6\x22\x79\xa0\x37\x9b\xdc\x0f\xbf\xa8\x37\x21\xfe\x53\xbe\xb3\x7c\x3a\xc5\x14\xe8\x56\x0d\xf6\x73\x88\x79\x28\xbc\x33\x53\x63\xc0\x32\x7c\x95\x1a\xd9\xe5\xe5\x35\x8b\x71\xcf\x22\xf6\x62\x6e\xf0\x4a\xf0\xf8\x5d\x1c\xfd\x26\xb5\x31\x76\xfe\x4d\x0e\x4a\xff\x04\x00\x00\xff\xff\x51\x73\x11\x3f\x89\x04\x00\x00")

func templatesAccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAccountHtml,
		"templates/account.html",
	)
}

func templatesAccountHtml() (*asset, error) {
	bytes, err := templatesAccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/account.html", size: 1161, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0x99, 0x86, 0xd3, 0x3e, 0x49, 0x8c, 0xc1, 0x54, 0xab, 0x5d, 0xa2, 0x4d, 0xa, 0x2f, 0x46, 0xdb, 0xd6, 0x5f, 0x23, 0x7a, 0xa4, 0xcf, 0x95, 0x46, 0x70, 0xc9, 0xfb, 0x2f, 0xa, 0x73, 0x44}}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\x64\x5f\x4b\xf7\xa1\x37\xf0\x10\x91\x4c\x8d\xa0\x8d\xbc\x66\x23\xc3\xbb\xbb\x04\xdd\x74\x37\x30\x3f\x9f\x84\xc2\xed\xb1\x13\x91\x66\xcd\x22\x26\xf7\x20\xa1\xf3\xf5\x7e\xe6\x4e\xc4\xca\x5c\x68\x11\xee\x01\x48\xb7\x56\x3e\x6b\x00\x80\x54\x97\x55\xc2\xe5\xca\xe3\xc8\x77\xc2\x3d\xcd\x75\x19\x5f\x9a\x7f\xd5\x89\xd9\x5a\xeb\x7f\x46\x9a\xc0\xbd\x8c\xf9\x0d\x00\x00\xff\xff\xa4\xea\xe5\xf4\x80\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 128, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xc3, 0x9d, 0xa5, 0xb1, 0x91, 0x8, 0x40, 0xac, 0x6, 0x3c, 0x30, 0x29, 0xd1, 0x5a, 0xb, 0x83, 0xce, 0xea, 0x53, 0xe2, 0x59, 0xd0, 0x8d, 0x2f, 0x79, 0xef, 0x43, 0xa8, 0x3a, 0x2d, 0xcc}}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x31\x0a\xc3\x30\x10\x04\x7b\xbd\x62\xb9\xde\x08\xf7\x8a\xfa\x40\x3e\xa1\xa0\x93\x25\x70\xee\x82\x51\x91\x70\xe8\xef\x41\xc4\x8d\xbb\x65\x87\x19\x33\x64\x2e\x4d\x18\xd4\x24\xf3\x87\xb0\x8c\xe1\xcc\xd0\xf9\xf5\xde\x53\x67\x50\xe5\x94\xf9\x20\x8c\xe1\x80\xf0\xd4\xfc\x8d\x0e\x00\x42\x5d\xe3\x7d\x3a\xc1\xd7\xf5\xbc\x12\xea\xc1\xe5\x46\x7e\xd7\xad\x09\xc5\x87\x6e\x68\x12\x7c\x9a\x3c\xf8\xbf\x7c\xa9\x17\xd5\x7e\xd6\xcd\x16\xb0\xe4\x39\x7f\x01\x00\x00\xff\xff\x8d\xdd\x33\xe2\x97\x00\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 151, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x1c, 0xd4, 0x3c, 0xec, 0xa, 0x70, 0x30, 0x2e, 0x14, 0x94, 0x93, 0x1a, 0x45, 0x2, 0xf2, 0xcb, 0x29, 0x89, 0xb3, 0x5b, 0x84, 0x68, 0xf9, 0xe4, 0x45, 0xb6, 0xf0, 0x31, 0xf0, 0x99, 0x19}}
	return a, nil
}

var _templatesPartialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xd0\xad\xad\xe5\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\xd6\x55\x48\xcd\x4b\x51\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd5\x0e\x34\x31\x2a\x00\x00\x00")

func templatesPartialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterHtml,
		"templates/partials/footer.html",
	)
}

func templatesPartialsFooterHtml() (*asset, error) {
	bytes, err := templatesPartialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.html", size: 42, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xcf, 0xc, 0x12, 0x96, 0x7c, 0xb2, 0x83, 0x2d, 0xaa, 0xaa, 0x23, 0x0, 0xdf, 0xbf, 0xe3, 0x21, 0xbe, 0x88, 0xe5, 0x75, 0x90, 0xa2, 0xba, 0xe1, 0x9c, 0x31, 0xc1, 0x3a, 0x75, 0xf2, 0x64}}
	return a, nil
}

var _templatesPartialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xbb\x4e\xf4\x40\x0c\x85\xfb\x3c\x85\x7f\xb7\x3f\xc9\x40\x87\x50\x66\x29\xb8\x94\x80\xb4\x4b\x41\x39\x9a\x38\x3b\x16\x13\x4f\x94\xf1\x5e\xa2\x28\xef\x8e\xb2\x29\x40\xa2\xa0\xb2\x8f\xbe\xe3\x63\xd9\xd3\x04\x0d\xb5\x2c\x04\x18\xc8\x35\x34\x20\x94\xf3\x5c\xd4\xff\x1e\x5f\x1f\x76\x1f\x6f\x4f\x10\xb4\x8b\x9b\xa2\x5e\x0a\x44\x27\x7b\x8b\x24\xb8\x29\x00\xea\xc5\xbf\x34\x00\x75\x47\xea\xc0\x07\x37\x64\x52\x8b\xef\xbb\xe7\xf2\x16\xc1\xfc\x84\xe2\x3a\xb2\x78\x64\x3a\xf5\x69\x50\x04\x9f\x44\x49\xd4\xe2\x89\x1b\x0d\xb6\xa1\x23\x7b\x2a\x2f\xe2\x0a\x58\x58\xd9\xc5\x32\x7b\x17\xc9\xde\x54\xd7\xdf\x61\xca\x1a\x69\xb3\xed\xdd\x41\x53\x3b\xd6\x66\xd5\x2b\x8b\x2c\x9f\x10\x06\x6a\x2d\x06\xd5\x3e\xdf\x19\xd3\x26\xd1\x5c\xed\x53\xda\x47\x72\x3d\xe7\xca\xa7\xce\xf8\x9c\xef\x5b\xd7\x71\x1c\xed\xcb\x41\x58\xd3\xff\xad\x93\x8c\x30\x50\xb4\x98\x75\x8c\x94\x03\x91\x22\xe8\xd8\x93\x45\xa5\xb3\x2e\x33\xf8\x7b\x8d\xc9\xea\x94\xfd\x42\x0d\x4b\x43\xe7\x6a\xf1\xfd\x19\x74\x39\xa6\x36\xeb\x03\xa7\xa9\x04\x92\x06\xe6\xb9\xf8\x0a\x00\x00\xff\xff\x36\x5e\xf5\xfc\x8d\x01\x00\x00")

func templatesPartialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderHtml,
		"templates/partials/header.html",
	)
}

func templatesPartialsHeaderHtml() (*asset, error) {
	bytes, err := templatesPartialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.html", size: 397, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x6c, 0xdb, 0x55, 0xb0, 0xc9, 0x63, 0x8, 0xa2, 0x78, 0x32, 0x5b, 0xf6, 0xa4, 0x84, 0x6b, 0xf6, 0x48, 0x31, 0xbb, 0x32, 0x6f, 0xbf, 0x86, 0x8c, 0xa8, 0xf6, 0x97, 0x97, 0xdc, 0xbc, 0x37}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/account.html":         templatesAccountHtml,
	"templates/error.html":           templatesErrorHtml,
	"templates/index.html":           templatesIndexHtml,
	"templates/partials/footer.html": templatesPartialsFooterHtml,
	"templates/partials/header.html": templatesPartialsHeaderHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"account.html": &bintree{templatesAccountHtml, map[string]*bintree{}},
		"error.html":   &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html":   &bintree{templatesIndexHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{templatesPartialsFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{templatesPartialsHeaderHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
