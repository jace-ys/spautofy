// Code generated by go-bindata. DO NOT EDIT.
// sources:
// web/templates/account.html (2.536kB)
// web/templates/error.html (427B)
// web/templates/index.html (848B)
// web/templates/partials/footer.html (42B)
// web/templates/partials/header.html (755B)
// web/templates/playlist.html (1.247kB)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAccountHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x93\x9c\x36\x10\xbd\xef\xaf\xe8\xd2\x21\xb7\x45\x33\xcc\xd8\x07\x87\xe1\x92\x64\x63\xa7\x5c\x9b\x54\xad\x9d\x54\xe5\x92\x12\xa2\x19\xe4\x15\x12\xd6\xc7\xda\x14\xc5\x7f\x4f\xf1\x31\x2c\x6c\x60\x66\x92\xf8\x86\x3e\xfa\xbd\x7e\x4f\x8d\x5a\x75\x0d\x29\x66\x42\x21\x10\xc6\xb9\xf6\xca\x11\xb8\x6d\x9a\x9b\xba\x06\x87\x45\x29\x99\x43\x20\x39\xb2\x14\x0d\x81\xa6\xb9\x01\x88\x12\x9d\x56\xf1\x0d\x00\x40\x94\x8a\x27\x10\xe9\x81\x7c\x31\xac\x2c\xd1\x90\x7e\x1a\x20\xca\x43\xe0\x92\x59\x7b\x20\x05\xfb\xa4\x0d\x89\xdf\xa2\x94\x1a\xea\x1a\x82\x8f\x16\xcd\x9d\x30\xd6\xdd\xb3\x02\xa1\x69\x82\x88\xe6\xe1\x29\xb0\xae\x6f\x41\x64\xa0\xb4\x83\xe0\x1e\xbf\xba\xe0\x9d\xfd\x13\x8d\xee\x99\x7b\xe4\x5d\xdc\x2e\x40\x29\x59\x25\x85\x75\x6f\x3a\xd0\x6e\xef\x9d\x36\x05\x73\x40\x42\xf8\x85\x29\x08\x37\x9b\xd7\x6d\xca\x11\xcd\x77\x53\x78\x54\xe9\x04\x2e\xd3\xa6\x00\xc6\x9d\xd0\xea\x40\xe8\x60\x81\xa5\xa7\x44\xdf\xfd\x08\x4d\x43\xa0\x40\x97\xeb\xf4\x40\x7e\xfb\xf5\xe1\xc3\x28\x72\xd0\x3f\xe8\xcc\x04\xca\xd4\x4e\x16\x17\x96\x67\xab\x00\x91\x64\x09\x4a\xc8\xb4\x39\x90\xcc\xe0\x67\x8f\x8a\x57\x24\xbe\x3b\x7d\x46\xb4\xdb\xf0\x22\xc8\xa2\x44\xee\x40\xb1\x02\xa7\x61\xdd\x39\x4c\x50\x66\x41\x00\x91\x2e\x5b\x8d\xf0\xc4\xa4\xc7\x03\xd9\x86\xa4\xae\x5b\xa7\xf1\x33\x04\x23\x21\x6c\x43\x68\x1a\xe8\x19\x30\xad\xeb\xc1\xac\xf8\xa7\x27\x34\x15\x14\x5a\xb9\x3c\xa2\x3d\xd2\x05\x82\xfd\x22\xfe\xfe\x1c\xfc\xae\x27\xb0\x57\x32\x2c\x2b\x38\x2b\xe0\xf5\xbf\x63\xd8\x2e\x7b\x74\x8e\x61\x1b\x9e\xa5\x88\x68\x1f\x38\xab\x12\x9a\x8a\xa7\xff\x5a\x36\x52\x14\xc2\x91\xf8\xde\x17\x09\x1a\xd0\x19\x38\xc3\xf8\xa3\xbd\xa2\x72\xfa\xc8\xae\x6a\x06\x90\x0b\x66\x6c\x26\x6e\x7c\x68\x59\xde\xb7\x61\xb0\xdd\x2c\xfb\xb1\xdd\x5c\x7b\x8e\x2b\xc0\xe1\x0a\x70\x78\x2d\xf0\x6e\x05\x78\xb7\x02\xbc\xbb\x16\x78\xbf\x02\xbc\x5f\x01\xde\xff\x5f\xe0\x57\x2b\xc0\xaf\x56\x80\xbf\x4d\x99\x09\x55\x7a\x07\xae\x2a\xf1\x40\x78\x8e\xfc\x31\xd1\x5f\xc9\x50\x3d\x5c\xab\x4c\x98\xa2\xaf\x9f\x71\x30\xc8\x38\x8d\x7b\x2d\xc1\x1f\xc2\xe5\x3f\xf4\x53\xd0\x34\x1d\xd2\x44\x04\x5d\x2f\xee\x13\x4e\xfc\xd0\x6e\x2d\x10\x18\x0c\x53\xac\x73\x0d\x0b\x26\x24\x24\x98\x69\x83\xc0\x0d\x32\x27\xd4\x71\x6c\x0c\x4b\x3f\xc1\x0b\x13\x5e\x0e\xbd\x3c\x19\xd2\x77\x84\x17\xd7\xb9\x14\x67\x1c\xb2\x3e\xe9\x7e\xa8\xc1\x83\x87\x61\x38\xe0\x95\x46\x14\xcc\x54\x04\xe8\x3c\x9d\x39\xe4\xc5\xee\xb7\x9c\x06\x83\xdc\x60\xb6\xda\xbe\xa8\x57\xd6\x27\x96\x1b\x91\xe0\x98\x50\xe2\x9d\xd3\x8a\xc4\x1f\x9f\xd7\x22\xca\x2e\x25\x37\xeb\x9d\x17\x92\x91\xfa\xa8\xbd\xfb\x07\xe1\x7b\x7d\x04\xed\xdd\x59\xb2\x88\xfa\xf1\xd8\x22\xda\xb6\xe8\xf8\xb9\x5f\x6b\x87\xa6\x6f\x76\xdd\xe7\xb4\x1d\x97\x27\x32\xae\xcb\xca\x88\x63\x3e\xbf\xd5\xbe\x6b\xa7\xbf\x87\x87\x92\x79\xa7\xb3\x0a\xc2\x4d\xb8\x09\x6e\x16\x72\xcf\x9d\x2b\xed\x1b\x4a\x8f\xc2\xe5\x3e\x09\xb8\x2e\xe8\x27\xc6\xf1\xb6\xb2\xd4\x0e\xc1\x04\x1c\x33\x47\x74\x07\xf2\x57\x22\x99\x7a\x24\x33\x17\xe2\xdf\x05\x7e\x01\xae\x53\x04\xad\xe0\x67\xe1\xde\xfa\x24\xa2\x6c\xb2\x27\x0e\x26\x6a\xcb\xa9\xd8\x56\xd4\xf0\xbc\x7a\x2e\xcf\xf1\xa5\x95\x1c\x49\x3c\xce\x47\xb4\x7f\x8b\xcd\x1e\x6b\x83\x2d\xd0\x3d\xe2\xc6\x23\xfb\x3b\x00\x00\xff\xff\xd5\x17\x49\xb9\xe8\x09\x00\x00")

func templatesAccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAccountHtml,
		"templates/account.html",
	)
}

func templatesAccountHtml() (*asset, error) {
	bytes, err := templatesAccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/account.html", size: 2536, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xc3, 0xc9, 0x1f, 0xa1, 0xf2, 0xf5, 0x1, 0xcc, 0x2, 0x9a, 0x86, 0x73, 0x1b, 0x5b, 0x83, 0x53, 0x22, 0xfc, 0x33, 0xf0, 0x30, 0x8b, 0x6b, 0xbd, 0xa6, 0x59, 0x23, 0x7c, 0xce, 0xc5, 0x40}}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x31\x6f\xf3\x20\x18\x84\xf7\xfc\x8a\xd3\x3b\x7c\x5b\x42\xe4\xf1\x2b\xf6\xda\x2e\x9d\x2a\x75\xad\xb0\x79\x6d\x68\x13\x83\x80\x24\xb2\x10\xff\xbd\x4a\x6c\xb9\x6e\xb7\xd3\x1d\x07\xba\x87\x9c\xa1\xb9\xb7\x23\x83\x38\x04\x17\x08\xfb\x52\x76\x39\x23\xf1\xd9\x9f\x54\x62\x90\x61\xa5\x39\x10\x4a\xd9\x01\xb2\x75\x7a\x6a\x76\x00\x20\xb5\xbd\xc2\xea\x9a\x6e\x41\x79\xcf\x81\x66\x1b\x90\xa6\x6a\x72\xc6\xe1\x95\x63\x54\x03\xa3\x14\x29\x4c\xb5\xa6\xbd\x73\x89\xc3\xa3\x39\xcb\xb5\x08\x48\x8f\xee\xa4\x62\xac\xa9\x73\x7e\x0a\x76\x30\x69\x93\x02\xff\xee\xf6\x13\xde\xbc\xba\x24\xd7\x4f\xa8\x8e\xd5\xf1\xb0\xc9\xa5\x82\x09\xdc\xd7\x64\x52\xf2\xf1\xbf\x10\x83\x4d\xe6\xd2\x1e\x3a\x77\x16\x9f\xaa\xe3\xfd\x14\x45\x5c\xca\x84\xa4\xc2\xc0\xa9\xa6\x8f\xf6\xa4\xc6\x2f\xda\xdc\x03\x34\xef\x96\x6f\xe8\x9c\x66\xb8\x11\xcf\x36\xbd\x5c\x5a\x29\xd4\xe6\x4c\xf3\xf3\xb0\x14\x7e\x9d\x27\xe6\x51\x0b\x23\xa1\xed\xf5\x0f\xae\x76\xa0\x66\xf5\xa5\x98\x81\xfe\x22\xbe\x60\xc1\xe3\x27\xf6\xe0\x51\xdf\xe5\x77\x00\x00\x00\xff\xff\x1f\x21\x53\x15\xab\x01\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 427, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x99, 0xb0, 0xed, 0x36, 0x9e, 0x52, 0x6a, 0x1a, 0x9e, 0xd7, 0xe5, 0x77, 0x19, 0x97, 0x35, 0x72, 0x2c, 0xa, 0xfe, 0x3, 0xe8, 0xfa, 0xf1, 0x1d, 0x5f, 0xa4, 0xf2, 0x2, 0x80, 0x48, 0xdb}}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xb1\x6e\xdc\x30\x0c\xdd\xef\x2b\x1e\x34\x64\x73\x94\x64\x6c\x74\x06\x3a\xb5\x43\xb7\x00\x5d\x0b\xda\xa2\x6d\x35\x3e\x49\x90\xe8\x5c\x8d\xc3\xfd\x7b\xe1\xd8\x4e\xec\x43\x16\x41\xe4\x13\x29\xf2\x3d\xf2\x72\x81\xe5\xc6\x79\x86\x72\xde\xf2\x3f\x85\xe2\x7a\x3d\x5c\x2e\x10\x3e\xc5\x9e\x84\xa1\x3a\x26\xcb\x49\xe1\x7a\x3d\x00\xa6\x0a\x76\x44\xdd\x53\xce\x47\xe5\x72\x11\x13\xf7\x81\xac\x2a\x0f\x00\x60\xac\x7b\x83\xb3\x47\x75\x4e\x14\x23\xa7\xc5\x0d\x98\x39\xc9\x3b\xb6\xe4\x5b\xa1\x25\x6a\x49\x59\x07\x2f\xec\x65\x83\xee\x71\xe7\xfd\x2e\x76\x4e\xfe\x58\xbe\x44\x1a\x24\x34\xa3\xd1\xdd\xe3\x0d\x1a\xf7\x36\xf0\x7d\x90\x70\x22\x61\x8b\x3a\x31\x89\x0b\x1e\xa1\xc1\x4b\x0c\xe2\x9a\x11\xb1\xa7\xb1\x77\x59\x32\x2a\xca\x6c\x11\x3c\xc6\x30\x24\x24\xae\xd9\x0b\x24\x44\x48\xa2\xfa\x35\xef\x7f\xd1\x37\xdf\x18\x42\x97\xb8\x39\x2a\xdd\x87\xd6\x79\xb5\x36\x50\x0d\x22\xc1\x23\x73\x1d\xbc\xa5\x34\xaa\xdb\xea\x8c\x5b\x9f\x36\x54\xa1\xa1\x22\xcf\x85\xa9\xd2\x68\x57\xde\xf9\x2a\xc7\xe7\xf9\xfc\x15\x5a\x38\x8f\xb3\x93\x6e\xad\xfe\xa6\x26\xda\xd1\xa8\xad\x7b\xdb\xb0\xbe\x35\x8d\x9e\x55\xf9\xb0\x9b\x10\x64\xd1\x6b\xbe\x6e\xf5\x8a\x9f\x6a\xc5\x31\xb9\xb6\xdb\xeb\x75\x37\xb9\x9f\xb1\x4a\x82\xa7\x87\xa7\x87\xfb\xc3\x17\xd4\x74\x22\x31\x7f\xd3\xba\x75\xd2\x0d\xd5\x7d\x1d\x4e\xfa\x2f\xd5\x5c\x8c\x59\xe7\x25\x58\x41\x28\xb5\x2c\x47\xf5\xa7\xea\xc9\xbf\xaa\x5d\x87\xe5\x6f\xc7\x67\xd4\xc1\xf2\x24\xd3\x0f\x27\x3f\x87\xca\x68\xda\xbc\x29\xef\x0f\x5f\x48\x64\xf4\xdc\xd4\x32\xb5\x9f\x4c\x7c\x0c\x70\xd5\x4e\x7c\x2f\x7e\xa3\xa7\xa9\x2f\xf7\x6b\xb1\xd0\x82\xf7\x75\x29\xc0\xde\x4e\xd7\xff\x01\x00\x00\xff\xff\x60\xc7\x4f\x56\x50\x03\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 848, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0xdd, 0xc9, 0x4, 0x20, 0x81, 0x79, 0xe4, 0x4b, 0xed, 0xe3, 0x70, 0xdc, 0xeb, 0xbe, 0x3e, 0xd5, 0x35, 0x28, 0x36, 0xee, 0xbd, 0x19, 0x62, 0x3d, 0xe9, 0x34, 0x52, 0x10, 0x76, 0x8e, 0xc1}}
	return a, nil
}

var _templatesPartialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xd0\xad\xad\xe5\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\xd6\x55\x48\xcd\x4b\x51\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd5\x0e\x34\x31\x2a\x00\x00\x00")

func templatesPartialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterHtml,
		"templates/partials/footer.html",
	)
}

func templatesPartialsFooterHtml() (*asset, error) {
	bytes, err := templatesPartialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.html", size: 42, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xcf, 0xc, 0x12, 0x96, 0x7c, 0xb2, 0x83, 0x2d, 0xaa, 0xaa, 0x23, 0x0, 0xdf, 0xbf, 0xe3, 0x21, 0xbe, 0x88, 0xe5, 0x75, 0x90, 0xa2, 0xba, 0xe1, 0x9c, 0x31, 0xc1, 0x3a, 0x75, 0xf2, 0x64}}
	return a, nil
}

var _templatesPartialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcd\x6a\xdc\x30\x10\xbe\xef\x53\x4c\x75\x8e\xad\x26\x50\x28\xc5\x36\x94\xb6\xe7\x16\xd2\x4b\x8f\xb3\xd2\x38\x9e\x5d\x59\xe3\x6a\xc6\xd9\x98\x65\xdf\xbd\x78\x7d\x68\x08\x25\x94\x9c\xa4\x8f\xef\x6f\xf4\x73\x3e\x43\xa4\x9e\x33\x81\x1b\x08\x23\x15\x07\xd5\xe5\xb2\x6b\xde\x7d\xfd\xfe\xe5\xe7\xaf\x1f\xdf\x60\xb0\x31\x75\xbb\x66\x5b\x00\x9a\x55\xb5\x6e\x00\x1a\x63\x4b\xd4\xdd\x4f\x38\x9b\xf4\x4b\xe3\x37\xbc\x71\x23\x19\x42\x18\xb0\x28\x59\xeb\x66\xeb\xab\x8f\x0e\xfc\x73\x32\xe3\x48\xad\x7b\x64\x3a\x4d\x52\xcc\x41\x90\x6c\x94\xad\x75\x27\x8e\x36\xb4\x91\x1e\x39\x50\x75\x05\x37\xc0\x99\x8d\x31\x55\x1a\x30\x51\x7b\x7b\x03\xb3\x52\xb9\x22\xdc\x27\x6a\xb3\xb8\x7f\x64\x47\xd2\x50\x78\x32\x96\xfc\x2c\xfe\xf3\x6c\x32\xa2\x51\x84\x50\x08\x57\x12\xa4\x87\xfb\x49\x8c\xfb\x05\xa6\x84\x4b\x62\x35\x85\x3d\x2a\x45\x90\x0c\x8b\xcc\x05\x0a\x05\xca\x06\x26\x13\x58\xc1\x70\xd4\xda\x75\xbb\xad\x31\x71\x3e\x42\xa1\xd4\x3a\x0e\x6b\x93\x2d\x13\xb5\x8e\x47\x7c\x20\xcf\x41\x1c\x0c\x85\xfa\xd6\x79\x35\x34\x0e\xfe\x4a\xa8\x4f\xf2\x20\xf5\x4a\x77\x2f\x53\xd4\x96\x44\x3a\x10\xd9\x4b\x6b\x50\xf5\x9c\x23\x3d\xd5\x41\xf5\x7a\x9d\x9b\x77\x3b\x26\x68\x09\x7f\xb5\x07\xf5\x87\xdf\x33\x95\xa5\x1e\x39\xd7\x07\x75\xeb\x3b\x53\xe9\x1a\xbf\xa9\xbb\x57\xad\xfb\x42\x78\x9c\x84\xb3\xe9\x9b\xfc\xdb\x94\xff\xe5\x1a\xcc\x26\xfd\xe4\x7d\x88\xf9\xa0\x75\x48\x32\xc7\x3e\x61\xa1\x3a\xc8\xe8\xf1\x80\x4f\x3e\xf1\x5e\x7d\x2f\xd9\x2a\x3c\x91\xca\x48\xfe\x43\x7d\x7b\x57\xbf\xaf\xee\xd6\x2a\x4c\xe9\x95\x11\x1b\xbf\x7d\xd8\xf3\xb9\x02\xca\x11\x2e\x97\xdd\x9f\x00\x00\x00\xff\xff\x7d\x46\x9a\xaf\xf3\x02\x00\x00")

func templatesPartialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderHtml,
		"templates/partials/header.html",
	)
}

func templatesPartialsHeaderHtml() (*asset, error) {
	bytes, err := templatesPartialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.html", size: 755, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xe9, 0x7f, 0xeb, 0xdf, 0x72, 0xb0, 0x26, 0x4d, 0x18, 0xb7, 0xeb, 0xe6, 0x4e, 0x2c, 0x27, 0x2, 0x52, 0x67, 0xda, 0xc4, 0x77, 0x7d, 0x2, 0x8b, 0x11, 0xb4, 0x9, 0xd5, 0xd4, 0x76, 0x32}}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x5f\x6b\xdc\x3a\x10\xc5\xdf\xf3\x29\xce\xd5\xc3\x7d\x5b\x2b\x6c\xde\xee\x95\x0d\x25\x85\xb6\x50\xda\x42\xd2\x42\x9f\x8a\x2c\x8f\xd7\xca\xca\x96\x91\xe4\xa4\xc6\xf8\xbb\x17\xff\xdb\xc8\xdb\xbc\xad\x47\x3a\x33\x3a\xbf\x99\x9d\x61\x40\x41\xa5\x6e\x08\xac\x35\xb2\x37\xda\x07\x86\xc3\x38\xde\x0c\x03\x02\xd5\xad\x91\x81\xc0\x2a\x92\x05\x39\x86\x71\xbc\x01\x44\x6e\x8b\x3e\xbb\x01\x00\x51\xe8\x67\xe8\x22\x65\x2f\x4e\xb6\x2d\x39\xb6\x84\x81\x61\x38\x40\x97\x48\x3e\xeb\xe6\xbc\xa8\xe6\xeb\xd5\x5d\xf6\xd3\x76\x0e\x5b\x29\x0c\x03\x92\x2f\xb2\x26\x8c\x23\x2a\xe9\x91\x13\x35\x50\x8e\x64\xa0\xe2\x1f\xdc\x57\xa4\xce\xd0\x01\xb6\x0b\x10\x12\x95\xa3\x32\x65\x93\x66\xcd\xcb\xb2\x8a\x1c\x09\x2e\xb3\x44\xf0\xea\x2e\xae\x4e\xc6\xd3\x6c\x64\x2b\x7d\x84\x32\xd2\xfb\x94\xd5\xf2\xc9\x3a\x96\x45\xa5\x05\xaf\x8e\x9b\x56\x94\xd6\xd5\x90\x2a\x68\xdb\xa4\x8c\x4b\xa5\x6c\xd7\x04\xcf\xa7\xeb\xdf\x3d\xb9\x4f\xef\x31\x8e\x7c\x33\xb0\xc4\xd7\x34\x0c\x35\x85\xca\x16\x29\xfb\xf6\xf5\xe1\xf1\xc2\x62\xc5\xb4\x56\x2f\x35\x99\xc2\x47\x87\x6f\x1c\xef\x4e\x01\xd1\x99\x7d\x60\x71\xe8\x64\x73\x22\x24\x8f\x4e\xaa\xb3\x7f\x85\x7c\x51\x19\x7d\xad\x02\x84\x6e\xda\x2e\x20\xf4\x2d\xa5\x4c\x4d\x78\x73\xfb\x9b\xa1\x91\x35\x2d\x60\x67\x7b\x6c\xee\x69\xf4\xf9\x2c\x4d\xb7\xbf\x30\x6b\xa9\xe0\x6f\x94\x30\x32\x27\x83\xd2\xba\x58\x10\xe3\xc6\x61\xee\xfb\x3b\x17\x26\x82\x33\xff\x59\x73\x9d\x4b\xf0\xbf\x2d\xcc\xad\x6d\x8a\x6b\xbb\x82\xef\x19\x09\x5e\xe8\xe7\xa8\x01\x57\x9f\x9d\xd9\x78\x2f\x8d\xf6\x50\xd4\x84\x68\x7e\xdf\x04\xb8\x83\xe7\xbb\xbc\xd6\xe1\x82\xe6\x7e\x9e\x59\xb6\xa5\x6d\x9d\xae\xa5\xeb\x19\xf8\xfe\x55\x71\xca\xf8\xcd\x82\x4f\x63\xb7\x9b\xdf\xd8\xa4\x28\xad\x0d\xe4\xe6\xb6\x2c\x3f\xe3\xe9\x6a\xb7\xaa\xca\xb6\xbd\xd3\xa7\x2a\xec\x7c\xfc\x3b\x85\xff\xc7\x43\x2b\xbb\x60\xcb\x1e\xc7\xdb\xe3\x6d\x12\xbf\x6a\xfb\x63\x55\x21\xb4\xfe\x3f\xce\x4f\x3a\x54\x5d\x9e\x28\x5b\xf3\x27\xa9\xe8\xd0\x7b\xee\x57\x31\x43\x90\xee\x44\x21\x65\xbf\x72\x23\x9b\x33\xdb\x01\xca\x7e\x68\x7a\x81\xb2\x05\xc1\x36\xf8\xa0\xc3\xc7\x2e\x17\x5c\x46\x77\xb2\x24\xb2\xdf\xc6\xee\x27\x53\xeb\x52\x79\x6d\xd6\x65\xbf\xe4\x27\x96\x5d\xe2\x82\x2f\x1b\x68\xb7\xa2\x56\x2c\x98\x57\xd7\x05\xdf\x9f\x00\x00\x00\xff\xff\xa0\x32\xae\x4f\xdf\x04\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 1247, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x57, 0x56, 0xe2, 0xd5, 0xdb, 0x36, 0x3f, 0x13, 0x31, 0x20, 0x8b, 0x55, 0xbd, 0xbc, 0x31, 0x9f, 0xfd, 0x8f, 0x5d, 0x1, 0xe0, 0xb0, 0xf3, 0x49, 0x63, 0x3a, 0x7f, 0x59, 0xb6, 0xba, 0x58}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/account.html":         templatesAccountHtml,
	"templates/error.html":           templatesErrorHtml,
	"templates/index.html":           templatesIndexHtml,
	"templates/partials/footer.html": templatesPartialsFooterHtml,
	"templates/partials/header.html": templatesPartialsHeaderHtml,
	"templates/playlist.html":        templatesPlaylistHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"account.html": &bintree{templatesAccountHtml, map[string]*bintree{}},
		"error.html":   &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html":   &bintree{templatesIndexHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{templatesPartialsFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{templatesPartialsHeaderHtml, map[string]*bintree{}},
		}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
