// Code generated by go-bindata. DO NOT EDIT.
// sources:
// web/templates/account.html (1.059kB)
// web/templates/error.html (128B)
// web/templates/index.html (151B)
// web/templates/partials/footer.html (42B)
// web/templates/partials/header.html (381B)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAccountHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\x9c\x30\x10\x85\xef\xfb\x2b\x9e\x7c\x0f\x0e\x34\xca\xa1\x32\x5c\x9a\x44\x4a\x55\xa5\x95\xd2\x2a\x52\x6f\x5e\x18\x82\x55\xf0\x6c\xc0\x44\x59\x21\xff\xf7\x0a\x9b\xac\x58\x69\xb3\xed\xcd\x36\x6f\xbe\x79\x78\xfc\xa6\x09\x15\xd5\xc6\x12\x84\x2e\x4b\x1e\xad\x13\xb8\xf0\x7e\x33\x4d\x70\xd4\xed\x5a\xed\x08\xa2\x21\x5d\x51\x2f\xe0\xfd\x46\x6d\xb9\xda\x17\x1b\x40\x35\x69\xf1\x44\x6d\xc9\x1d\x61\x9a\x90\xfc\x1a\xa8\x4f\x6e\xcc\xb0\x6b\xf5\xfe\x41\x77\x04\xef\x95\x6c\xd2\x20\xad\xb9\xef\xa0\x4b\x67\xd8\xe6\x42\x2e\x7d\xe4\xa1\xea\xfe\x06\xde\x0b\x74\xe4\x1a\xae\x72\xf1\xe3\xfb\xe3\x4f\x31\xd7\x01\xaa\x32\xaf\x71\x05\xa8\x56\x6f\xa9\x45\xcd\x7d\x2e\xea\x9e\x5e\x46\xb2\xe5\x5e\x14\x77\xef\x4b\x25\x83\xe0\x20\x1f\xa8\xa5\xd2\xc1\x54\x6b\x39\xac\xee\xe8\xa8\x7e\x91\x03\x8a\x77\xb3\x41\xbc\xea\x76\xa4\x5c\xa4\x99\x98\x26\x98\x1a\xf4\x82\xe4\xd0\x04\x69\x06\xef\x11\xd9\x54\x4d\x13\xc8\x56\xf0\xbe\xb8\x7d\xa5\x7e\x8f\x8e\xad\x6b\x94\x8c\xa4\x0f\xd1\x57\x27\xc9\x57\xe7\xc0\x9f\x22\x7a\xf8\x27\xfb\xb4\xeb\xb3\xa6\xaf\xff\x97\x9d\x9e\xbe\x91\x73\xec\x34\xfb\x00\xae\x64\x2c\x59\xe6\x2c\x0f\x83\x3e\x1a\xb9\xb1\xbb\xd1\xc1\xed\x77\x94\x8b\xb2\xa1\xf2\xcf\x96\xdf\x44\x18\x29\x75\xda\xb4\xef\xe3\x5c\x36\x8b\xcd\xb8\x8b\x56\x93\x27\xe3\x9a\xdb\xf9\x00\xde\x07\xc2\xca\x23\xe4\xa9\xb7\x15\xcb\x8b\x2f\x6c\x6b\xd3\x77\x3a\x5c\x40\x38\x3b\x7a\x60\x6b\xc7\x6b\x97\xc3\xb8\xed\x8c\x3b\x78\x79\x5c\xb6\xa1\x93\x92\x73\x10\xc2\x4a\xa3\xe9\xa9\xce\x85\x6c\xf9\x99\x47\x27\x8a\x6f\xfc\x0c\x1e\x9d\x92\x7a\xfe\x1e\xcd\x5b\x76\x48\x1e\xe8\xcd\x25\xf7\xc3\x6f\xea\x39\x04\x73\x4e\x5e\x56\xcc\xa7\x98\xa3\xd6\x9a\xc1\x7d\x0e\x01\x0c\xc2\x3b\x9e\x2d\x43\x64\xf8\xaa\x2d\xb2\xcb\xcb\x6b\x11\x83\x98\x45\xec\xc5\xf2\xeb\x1b\x25\x63\x90\x8f\x72\x5e\x33\xbb\x25\xe7\x2b\xe9\xdf\x00\x00\x00\xff\xff\x42\xb4\x23\xb3\x23\x04\x00\x00")

func templatesAccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAccountHtml,
		"templates/account.html",
	)
}

func templatesAccountHtml() (*asset, error) {
	bytes, err := templatesAccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/account.html", size: 1059, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0x4f, 0x97, 0x6b, 0x11, 0x66, 0x35, 0xfc, 0x8f, 0x93, 0x5f, 0xb, 0x25, 0x73, 0xf2, 0xfb, 0x8e, 0x63, 0x25, 0x37, 0xba, 0x84, 0x98, 0x0, 0x4f, 0x9c, 0x5c, 0x91, 0x68, 0xbb, 0x23, 0x4}}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\x64\x5f\x4b\xf7\xa1\x37\xf0\x10\x91\x4c\x8d\xa0\x8d\xbc\x66\x23\xc3\xbb\xbb\x04\xdd\x74\x37\x30\x3f\x9f\x84\xc2\xed\xb1\x13\x91\x66\xcd\x22\x26\xf7\x20\xa1\xf3\xf5\x7e\xe6\x4e\xc4\xca\x5c\x68\x11\xee\x01\x48\xb7\x56\x3e\x6b\x00\x80\x54\x97\x55\xc2\xe5\xca\xe3\xc8\x77\xc2\x3d\xcd\x75\x19\x5f\x9a\x7f\xd5\x89\xd9\x5a\xeb\x7f\x46\x9a\xc0\xbd\x8c\xf9\x0d\x00\x00\xff\xff\xa4\xea\xe5\xf4\x80\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 128, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xc3, 0x9d, 0xa5, 0xb1, 0x91, 0x8, 0x40, 0xac, 0x6, 0x3c, 0x30, 0x29, 0xd1, 0x5a, 0xb, 0x83, 0xce, 0xea, 0x53, 0xe2, 0x59, 0xd0, 0x8d, 0x2f, 0x79, 0xef, 0x43, 0xa8, 0x3a, 0x2d, 0xcc}}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x31\x0a\xc3\x30\x10\x04\x7b\xbd\x62\xb9\xde\x08\xf7\x8a\xfa\x40\x3e\xa1\xa0\x93\x25\x70\xee\x82\x51\x91\x70\xe8\xef\x41\xc4\x8d\xbb\x65\x87\x19\x33\x64\x2e\x4d\x18\xd4\x24\xf3\x87\xb0\x8c\xe1\xcc\xd0\xf9\xf5\xde\x53\x67\x50\xe5\x94\xf9\x20\x8c\xe1\x80\xf0\xd4\xfc\x8d\x0e\x00\x42\x5d\xe3\x7d\x3a\xc1\xd7\xf5\xbc\x12\xea\xc1\xe5\x46\x7e\xd7\xad\x09\xc5\x87\x6e\x68\x12\x7c\x9a\x3c\xf8\xbf\x7c\xa9\x17\xd5\x7e\xd6\xcd\x16\xb0\xe4\x39\x7f\x01\x00\x00\xff\xff\x8d\xdd\x33\xe2\x97\x00\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 151, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x1c, 0xd4, 0x3c, 0xec, 0xa, 0x70, 0x30, 0x2e, 0x14, 0x94, 0x93, 0x1a, 0x45, 0x2, 0xf2, 0xcb, 0x29, 0x89, 0xb3, 0x5b, 0x84, 0x68, 0xf9, 0xe4, 0x45, 0xb6, 0xf0, 0x31, 0xf0, 0x99, 0x19}}
	return a, nil
}

var _templatesPartialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xd0\xad\xad\xe5\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\xd6\x55\x48\xcd\x4b\x51\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd5\x0e\x34\x31\x2a\x00\x00\x00")

func templatesPartialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterHtml,
		"templates/partials/footer.html",
	)
}

func templatesPartialsFooterHtml() (*asset, error) {
	bytes, err := templatesPartialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.html", size: 42, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xcf, 0xc, 0x12, 0x96, 0x7c, 0xb2, 0x83, 0x2d, 0xaa, 0xaa, 0x23, 0x0, 0xdf, 0xbf, 0xe3, 0x21, 0xbe, 0x88, 0xe5, 0x75, 0x90, 0xa2, 0xba, 0xe1, 0x9c, 0x31, 0xc1, 0x3a, 0x75, 0xf2, 0x64}}
	return a, nil
}

var _templatesPartialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xbd\x4e\xec\x40\x0c\x46\xfb\x7d\x0a\xcb\xed\xbd\xc9\x40\x87\x50\x66\xe9\x28\x69\x16\x1e\xc0\x9a\x71\x76\x2c\x26\x9e\x28\xe3\xfd\x89\xa2\xbc\x3b\xca\x6e\x01\x12\x05\x9d\x3f\x1d\xfb\x58\xf6\xb2\x40\xe4\x5e\x94\x01\x13\x53\xe4\x09\xa1\x59\xd7\x5d\x97\x6c\xc8\x90\x49\x8f\x1e\x59\x71\xbf\x03\xe8\x36\xbe\x15\x00\xdd\xc0\x46\x10\x12\x4d\x95\xcd\xe3\xc7\xfb\x6b\xf3\x84\xe0\x7e\x42\xa5\x81\x3d\x9e\x85\x2f\x63\x99\x0c\x21\x14\x35\x56\xf3\x78\x91\x68\xc9\x47\x3e\x4b\xe0\xe6\x16\xfe\x83\xa8\x98\x50\x6e\x6a\xa0\xcc\xfe\xb1\x7d\xf8\x96\x99\x58\xe6\xfd\x61\xa4\x93\x95\x7e\xee\xdc\x3d\xdf\x59\x16\xfd\x84\x34\x71\xef\x31\x99\x8d\xf5\xd9\xb9\xbe\xa8\xd5\xf6\x58\xca\x31\x33\x8d\x52\xdb\x50\x06\x17\x6a\x7d\xe9\x69\x90\x3c\xfb\xb7\x93\x8a\x95\x7f\x07\xd2\x8a\x30\x71\xf6\x58\x6d\xce\x5c\x13\xb3\x21\xd8\x3c\xb2\x47\xe3\xab\x6d\x33\xf8\x7b\x8d\xab\x46\x26\x61\xa3\x4e\x34\xf2\xb5\xdd\xfa\xfe\x14\xdd\x8e\xe9\xdc\xfd\x81\xcb\xd2\x00\x6b\x84\x75\xdd\x7d\x05\x00\x00\xff\xff\xc7\x18\xb3\x80\x7d\x01\x00\x00")

func templatesPartialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderHtml,
		"templates/partials/header.html",
	)
}

func templatesPartialsHeaderHtml() (*asset, error) {
	bytes, err := templatesPartialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.html", size: 381, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x65, 0x43, 0x7e, 0x23, 0x27, 0xc2, 0x6b, 0xff, 0x8e, 0xca, 0x38, 0x36, 0x45, 0x32, 0xda, 0x30, 0x92, 0xd4, 0xa8, 0x7f, 0xa6, 0x29, 0x3b, 0x86, 0x3d, 0x94, 0x1b, 0xa9, 0x63, 0xe1, 0x25}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/account.html":         templatesAccountHtml,
	"templates/error.html":           templatesErrorHtml,
	"templates/index.html":           templatesIndexHtml,
	"templates/partials/footer.html": templatesPartialsFooterHtml,
	"templates/partials/header.html": templatesPartialsHeaderHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"account.html": &bintree{templatesAccountHtml, map[string]*bintree{}},
		"error.html":   &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html":   &bintree{templatesIndexHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{templatesPartialsFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{templatesPartialsHeaderHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
