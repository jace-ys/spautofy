// Code generated by go-bindata. DO NOT EDIT.
// sources:
// web/templates/account.html (749B)
// web/templates/error.html (279B)
// web/templates/index.html (151B)
// web/templates/partials/footer.html (42B)
// web/templates/partials/header.html (382B)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAccountHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\xab\xd5\x30\x10\xc5\xf7\xfd\x14\xc3\xec\x9f\xa1\x4f\x71\x95\x76\xe3\x53\x10\x44\x85\x27\xb8\x4e\xd3\xe9\x6b\x30\xc9\xd4\x34\xbd\x58\x42\xbe\xbb\xf4\x2f\xf7\x82\x17\xdf\x6e\xa6\x39\x3f\x66\x7a\xe6\xa4\x04\x2d\x75\xc6\x13\xa0\xd2\x9a\x27\x1f\x11\x1e\x72\x2e\x52\x82\x48\x6e\xb0\x2a\x12\x60\x4f\xaa\xa5\x80\x90\x73\x21\x1b\x6e\xe7\xba\x00\x90\x7d\x59\xff\x24\xab\xd9\x11\xa4\x04\x6f\x9e\xcc\x38\x58\x35\x7f\x55\x8e\x20\x67\x29\xfa\x72\x55\x75\x1c\x1c\x28\x1d\x0d\xfb\x0a\xc5\x3e\x42\x2c\xc0\xe7\x27\xc8\x19\xc1\x51\xec\xb9\xad\xf0\xfb\xb7\xe7\x1f\xb8\x20\x00\xb2\x35\x97\xad\x02\x90\x56\x35\x64\xa1\xe3\x50\x61\x17\xe8\xf7\x44\x5e\xcf\x58\x7f\x3a\x4a\x29\x56\xc1\x29\x1f\xc9\x92\x8e\x60\xda\x6b\x39\x78\xe5\xe8\x86\xdf\xe5\x00\x92\x87\x65\x37\xb8\x28\x3b\x51\x85\xe5\x23\xd6\x1f\x2f\x14\x66\x70\xec\x63\x2f\xc5\xf6\x7c\x57\xff\xee\x90\xbf\xdd\x80\xf1\xbf\xc4\x39\xe0\xfd\x6b\x89\xf2\x20\xca\xc7\x3b\x88\x14\xdb\x6f\xef\xf6\x89\xd3\xbf\x1b\x27\x8d\x1f\xa6\x08\x71\x1e\xa8\x42\xdd\x93\xfe\xd5\xf0\x1f\x5c\x9d\x22\xa7\x8c\x3d\x5c\xda\x9b\x7d\xf8\xde\x89\x7f\xdd\x63\x7b\xab\x3f\xb0\xef\x4c\x70\x6a\xdd\x79\xfd\x76\x1c\x45\x36\xe1\x20\xaf\x97\xba\x5e\x64\x9c\x1a\x67\xe2\x39\xee\x79\x6b\xd7\xe8\x88\x25\x3b\x6b\xa5\xa0\x0f\xd4\x55\x28\x2c\xbf\xf0\x14\xb1\xfe\xc2\x2f\xc0\x53\x94\x42\xd5\x85\x14\x5b\x24\x6f\x12\xdb\x31\xc7\x3d\xb1\x29\x3d\x00\xf9\x76\x29\xff\x06\x00\x00\xff\xff\x64\xc4\xe4\x75\xed\x02\x00\x00")

func templatesAccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAccountHtml,
		"templates/account.html",
	)
}

func templatesAccountHtml() (*asset, error) {
	bytes, err := templatesAccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/account.html", size: 749, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x34, 0xb, 0xdd, 0xbe, 0x66, 0x97, 0xf7, 0x6, 0x18, 0x6c, 0x15, 0x6c, 0x69, 0x6d, 0x15, 0x88, 0xf0, 0x29, 0x67, 0x79, 0x4e, 0x12, 0x18, 0x28, 0x55, 0xfa, 0xd5, 0x45, 0x73, 0x6a, 0xe0}}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\x03\x31\x10\x44\xfb\xfb\x8a\x91\xfb\xc4\x4a\x7f\x9c\x04\xa2\xa1\xa0\xe4\x03\x96\xf3\x1c\x3e\x91\xd8\xc8\xde\x14\x68\xb5\xff\x8e\x48\x0e\x41\x24\xea\x99\xf7\x34\x63\x86\xc4\x65\x2d\x44\x60\x6b\xb5\x05\xec\xdc\x07\x33\x28\x4f\x1f\x47\x51\x22\x64\x4a\x62\x0b\x70\x1f\x80\xf1\xb5\xa6\xcf\x69\x00\x80\x31\x1f\x26\x33\xec\x9f\xd9\xbb\xbc\x11\xee\x63\xcc\x87\x6b\x66\x86\x75\xc1\xfe\xfe\xac\x99\x45\xd7\x59\x94\xe9\x62\xbe\x80\x82\xdc\xb8\xdc\x85\x28\xf3\x5c\xcf\x45\xe3\xb7\xe6\xa5\xb3\x3d\x3d\xc2\x3d\x4c\x0f\x32\xbf\x43\x2b\xb6\x78\x8c\xf2\x63\xdd\x81\xc7\xce\x7f\x4c\xbf\x50\xae\x27\xde\x12\x25\x6d\xdb\xe3\x75\xfc\xcd\xbb\xa5\x56\xdd\xde\xfd\x29\x7f\x05\x00\x00\xff\xff\x22\x4b\xe2\x0b\x17\x01\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 279, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0xe3, 0xd4, 0xac, 0x4f, 0x20, 0x3c, 0xcb, 0x8, 0xd9, 0xf7, 0x8c, 0xf6, 0xa5, 0xea, 0x42, 0xcc, 0xeb, 0xe5, 0xc3, 0xa8, 0xdd, 0x6, 0x9f, 0xec, 0xb4, 0xf0, 0xfc, 0xee, 0xb7, 0x1c, 0xf7}}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x31\x0a\xc3\x30\x10\x04\x7b\xbd\x62\xb9\xde\x08\xf7\x8a\xfa\x40\x3e\xa1\xa0\x93\x25\x70\xee\x82\x51\x91\x70\xe8\xef\x41\xc4\x8d\xbb\x65\x87\x19\x33\x64\x2e\x4d\x18\xd4\x24\xf3\x87\xb0\x8c\xe1\xcc\xd0\xf9\xf5\xde\x53\x67\x50\xe5\x94\xf9\x20\x8c\xe1\x80\xf0\xd4\xfc\x8d\x0e\x00\x42\x5d\xe3\x7d\x3a\xc1\xd7\xf5\xbc\x12\xea\xc1\xe5\x46\x7e\xd7\xad\x09\xc5\x87\x6e\x68\x12\x7c\x9a\x3c\xf8\xbf\x7c\xa9\x17\xd5\x7e\xd6\xcd\x16\xb0\xe4\x39\x7f\x01\x00\x00\xff\xff\x8d\xdd\x33\xe2\x97\x00\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 151, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x1c, 0xd4, 0x3c, 0xec, 0xa, 0x70, 0x30, 0x2e, 0x14, 0x94, 0x93, 0x1a, 0x45, 0x2, 0xf2, 0xcb, 0x29, 0x89, 0xb3, 0x5b, 0x84, 0x68, 0xf9, 0xe4, 0x45, 0xb6, 0xf0, 0x31, 0xf0, 0x99, 0x19}}
	return a, nil
}

var _templatesPartialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xd0\xad\xad\xe5\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\xd6\x55\x48\xcd\x4b\x51\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd5\x0e\x34\x31\x2a\x00\x00\x00")

func templatesPartialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterHtml,
		"templates/partials/footer.html",
	)
}

func templatesPartialsFooterHtml() (*asset, error) {
	bytes, err := templatesPartialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.html", size: 42, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xcf, 0xc, 0x12, 0x96, 0x7c, 0xb2, 0x83, 0x2d, 0xaa, 0xaa, 0x23, 0x0, 0xdf, 0xbf, 0xe3, 0x21, 0xbe, 0x88, 0xe5, 0x75, 0x90, 0xa2, 0xba, 0xe1, 0x9c, 0x31, 0xc1, 0x3a, 0x75, 0xf2, 0x64}}
	return a, nil
}

var _templatesPartialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xbd\x4e\xec\x40\x0c\x46\xfb\x3c\x85\xe5\xf6\xde\x64\xa0\x43\x28\xb3\x74\x94\x34\x0b\x0f\x60\x4d\x9c\x1d\x8b\x89\x27\xca\x78\x7f\xa2\x28\xef\x8e\xb2\x29\x40\xa2\xa0\xf3\xa7\x63\x1f\xcb\x5e\x16\xe8\xb8\x17\x65\xc0\xc8\xd4\xf1\x84\x50\xaf\x6b\xd5\x46\x1b\x12\x24\xd2\x93\x47\x56\x3c\x54\x00\xed\xc6\xb7\x02\xa0\x1d\xd8\x08\x42\xa4\xa9\xb0\x79\xfc\x78\x7f\xad\x9f\x10\xdc\x4f\xa8\x34\xb0\xc7\x8b\xf0\x75\xcc\x93\x21\x84\xac\xc6\x6a\x1e\xaf\xd2\x59\xf4\x1d\x5f\x24\x70\x7d\x0f\xff\x41\x54\x4c\x28\xd5\x25\x50\x62\xff\xd8\x3c\x7c\xcb\x4c\x2c\xf1\xe1\x38\xd2\xd9\x72\x3f\xb7\x6e\xcf\xd5\x0e\x93\xe8\x27\xc4\x89\x7b\x8f\xd1\x6c\x2c\xcf\xce\xf5\x59\xad\x34\xa7\x9c\x4f\x89\x69\x94\xd2\x84\x3c\xb8\x50\xca\x4b\x4f\x83\xa4\xd9\xbf\x9d\x55\x2c\xff\x3b\x92\x16\x84\x89\x93\xc7\x62\x73\xe2\x12\x99\x0d\xc1\xe6\x91\x3d\x1a\xdf\x6c\x9b\xc1\xc3\xaf\x35\xae\x18\x99\x84\x8d\x3a\xd1\x8e\x6f\xcd\xd6\xf7\xa7\xe8\x7e\x4d\xeb\xf6\x0f\x2e\x4b\x0d\xac\x1d\xac\x6b\xf5\x15\x00\x00\xff\xff\x53\x04\xe9\x6f\x7e\x01\x00\x00")

func templatesPartialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderHtml,
		"templates/partials/header.html",
	)
}

func templatesPartialsHeaderHtml() (*asset, error) {
	bytes, err := templatesPartialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.html", size: 382, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0x43, 0x76, 0x1d, 0xf0, 0x37, 0x41, 0x35, 0x9f, 0x2c, 0x26, 0x6d, 0x9e, 0x74, 0x8, 0xf4, 0x86, 0x19, 0x6d, 0x87, 0xc4, 0x21, 0x57, 0x26, 0x30, 0x1, 0x4c, 0x1, 0xb3, 0xcd, 0xee, 0x9b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/account.html":         templatesAccountHtml,
	"templates/error.html":           templatesErrorHtml,
	"templates/index.html":           templatesIndexHtml,
	"templates/partials/footer.html": templatesPartialsFooterHtml,
	"templates/partials/header.html": templatesPartialsHeaderHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"account.html": &bintree{templatesAccountHtml, map[string]*bintree{}},
		"error.html":   &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html":   &bintree{templatesIndexHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{templatesPartialsFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{templatesPartialsHeaderHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
