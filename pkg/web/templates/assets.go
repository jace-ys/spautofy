// Code generated by go-bindata. DO NOT EDIT.
// sources:
// web/templates/account.html (1.62kB)
// web/templates/error.html (128B)
// web/templates/index.html (151B)
// web/templates/partials/footer.html (42B)
// web/templates/partials/header.html (397B)
// web/templates/playlist.html (588B)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAccountHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x5f\x6b\xa4\x3c\x14\xc6\xef\xfb\x29\x1e\x72\xdf\xc9\xe8\x94\x5e\xbc\x38\xde\xbc\xdd\x42\x97\xd2\x5d\x68\x4b\x61\xef\xa2\x1e\x6b\xa8\x26\xd3\x18\x4b\x07\xc9\x77\x5f\xd4\x38\x6b\x17\x95\xd9\xbb\x44\xf2\xfc\xce\x73\xfe\x70\x6c\x5b\x64\x94\x4b\x45\x60\x22\x4d\x75\xa3\x2c\xc3\xa5\x73\x17\x6d\x0b\x4b\xd5\xa1\x14\x96\xc0\x0a\x12\x19\x19\x06\xe7\x2e\x80\x28\xd1\xd9\x31\xbe\x00\x80\xa8\x08\xe2\x17\x2a\x53\x5d\x11\xda\x16\x9b\xe7\x9a\xcc\xe6\x46\xd6\x87\x52\x1c\x1f\x44\x45\x70\x2e\xe2\x45\xe0\x1f\xe7\xda\x54\x10\xa9\x95\x5a\xed\x19\xf7\xd1\x6a\x7e\x12\xde\xdd\xc0\x39\x86\x8a\x6c\xa1\xb3\x3d\xfb\xf9\xe3\xf1\x89\x0d\x52\x20\xca\xe4\xc7\x78\x06\xa2\x52\x24\x54\x22\xd7\x66\xcf\x72\x43\xef\x0d\xa9\xf4\xc8\xe2\xdb\xf1\x18\xf1\xfe\xc1\x44\x50\x53\x49\xa9\x85\xcc\xa6\x02\x28\x51\xd1\x17\xc2\x49\x00\x44\xfa\xd0\x39\xc5\x87\x28\x1b\xda\xb3\x20\x64\x6d\x0b\x99\x83\xde\xb1\x39\x05\x42\x10\xc2\x39\x0c\x74\xca\xda\x16\xa4\x32\x38\x17\x7f\xfb\x20\x73\x44\xa5\x95\x2d\x22\x3e\x90\x56\xe0\x57\xb3\xec\xab\x35\xf4\x6e\x80\xd7\x67\xd0\xe7\x9d\xaf\x1a\xbf\x3e\x9f\x1e\xcc\xd7\x65\x8d\x1e\x84\x8b\xf8\x88\x0f\xa2\x53\xdf\xf9\xa4\xf1\xcb\x43\x50\xca\x4a\x5a\x16\x3f\x34\x55\x42\x06\x3a\x87\x35\x22\x7d\xab\x57\xe7\x60\xd0\xf8\x19\xf0\x80\x95\x34\xb7\x93\x3c\x9f\x3a\xfa\x7d\x27\x41\xb0\x9d\xcf\x34\xd8\x9e\xd3\x99\x05\x68\xb8\x00\x0d\xcf\x81\xee\x16\xa0\xbb\x05\xe8\x6e\x06\xfa\x2f\x6d\x90\xea\xd0\x58\xd8\xe3\x81\xf6\x2c\x2d\x28\x7d\x4b\xf4\x27\xeb\x2b\x9c\x6a\x95\x4b\x53\x8d\x35\x3e\x5d\xbd\xd1\xf1\x3e\xb8\xdd\xbc\x48\x5b\xfc\x3f\x7c\x82\x73\x3d\x69\x62\x13\x7c\xbe\xf3\x23\x24\xf6\x52\xd1\x97\x82\x2a\x21\xcb\xbf\xba\xff\x35\x87\xa9\xeb\xba\x49\xfa\x51\xf0\xbe\x1e\xfd\xd5\x47\x8c\x78\xb7\xb8\xfc\x79\x8a\x10\x28\x0c\xe5\x7b\xc6\x4b\xfd\xaa\x1b\xcb\xe2\x7b\xfd\x0a\xdd\xd8\x88\x8b\x51\x79\x7a\x3e\xe4\xa8\xb4\xc5\xe6\x81\x3e\xed\xe6\xae\xfe\x45\x46\xf7\x9b\x76\x99\xbb\xb0\x22\x79\xa3\xea\x26\xa9\x53\x23\x13\x62\xf1\xf3\x9f\xcb\x5c\xe0\xa8\x08\xe3\x2e\x22\xba\x9d\x5c\xca\xda\xfe\xd7\x6f\xea\xde\xc4\xad\xee\xea\x05\x16\xe2\xbb\x50\x08\xb7\xdb\x6b\x36\x6c\xec\x70\x34\x7d\xe9\xab\xdf\xad\x7d\x3e\xec\xfd\x2f\x3f\x86\x5c\x6b\xeb\x7f\x0c\x93\xc7\xbf\x03\x00\x00\xff\xff\x65\xa8\xa5\x70\x54\x06\x00\x00")

func templatesAccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAccountHtml,
		"templates/account.html",
	)
}

func templatesAccountHtml() (*asset, error) {
	bytes, err := templatesAccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/account.html", size: 1620, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x6, 0x73, 0xb9, 0xdd, 0x41, 0xf3, 0x8c, 0x29, 0x42, 0x7d, 0x67, 0x9f, 0xbe, 0xdd, 0xe5, 0x5a, 0x40, 0x1f, 0x90, 0x74, 0xf6, 0x6d, 0x4b, 0xef, 0x9d, 0xf8, 0x83, 0x58, 0xe8, 0x62, 0xf4}}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\x64\x5f\x4b\xf7\xa1\x37\xf0\x10\x91\x4c\x8d\xa0\x8d\xbc\x66\x23\xc3\xbb\xbb\x04\xdd\x74\x37\x30\x3f\x9f\x84\xc2\xed\xb1\x13\x91\x66\xcd\x22\x26\xf7\x20\xa1\xf3\xf5\x7e\xe6\x4e\xc4\xca\x5c\x68\x11\xee\x01\x48\xb7\x56\x3e\x6b\x00\x80\x54\x97\x55\xc2\xe5\xca\xe3\xc8\x77\xc2\x3d\xcd\x75\x19\x5f\x9a\x7f\xd5\x89\xd9\x5a\xeb\x7f\x46\x9a\xc0\xbd\x8c\xf9\x0d\x00\x00\xff\xff\xa4\xea\xe5\xf4\x80\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 128, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xc3, 0x9d, 0xa5, 0xb1, 0x91, 0x8, 0x40, 0xac, 0x6, 0x3c, 0x30, 0x29, 0xd1, 0x5a, 0xb, 0x83, 0xce, 0xea, 0x53, 0xe2, 0x59, 0xd0, 0x8d, 0x2f, 0x79, 0xef, 0x43, 0xa8, 0x3a, 0x2d, 0xcc}}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x31\x0a\xc3\x30\x10\x04\x7b\xbd\x62\xb9\xde\x08\xf7\x8a\xfa\x40\x3e\xa1\xa0\x93\x25\x70\xee\x82\x51\x91\x70\xe8\xef\x41\xc4\x8d\xbb\x65\x87\x19\x33\x64\x2e\x4d\x18\xd4\x24\xf3\x87\xb0\x8c\xe1\xcc\xd0\xf9\xf5\xde\x53\x67\x50\xe5\x94\xf9\x20\x8c\xe1\x80\xf0\xd4\xfc\x8d\x0e\x00\x42\x5d\xe3\x7d\x3a\xc1\xd7\xf5\xbc\x12\xea\xc1\xe5\x46\x7e\xd7\xad\x09\xc5\x87\x6e\x68\x12\x7c\x9a\x3c\xf8\xbf\x7c\xa9\x17\xd5\x7e\xd6\xcd\x16\xb0\xe4\x39\x7f\x01\x00\x00\xff\xff\x8d\xdd\x33\xe2\x97\x00\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 151, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x1c, 0xd4, 0x3c, 0xec, 0xa, 0x70, 0x30, 0x2e, 0x14, 0x94, 0x93, 0x1a, 0x45, 0x2, 0xf2, 0xcb, 0x29, 0x89, 0xb3, 0x5b, 0x84, 0x68, 0xf9, 0xe4, 0x45, 0xb6, 0xf0, 0x31, 0xf0, 0x99, 0x19}}
	return a, nil
}

var _templatesPartialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xd0\xad\xad\xe5\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\xd6\x55\x48\xcd\x4b\x51\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd5\x0e\x34\x31\x2a\x00\x00\x00")

func templatesPartialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterHtml,
		"templates/partials/footer.html",
	)
}

func templatesPartialsFooterHtml() (*asset, error) {
	bytes, err := templatesPartialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.html", size: 42, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xcf, 0xc, 0x12, 0x96, 0x7c, 0xb2, 0x83, 0x2d, 0xaa, 0xaa, 0x23, 0x0, 0xdf, 0xbf, 0xe3, 0x21, 0xbe, 0x88, 0xe5, 0x75, 0x90, 0xa2, 0xba, 0xe1, 0x9c, 0x31, 0xc1, 0x3a, 0x75, 0xf2, 0x64}}
	return a, nil
}

var _templatesPartialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xbb\x4e\xf4\x40\x0c\x85\xfb\x3c\x85\x7f\xb7\x3f\xc9\x40\x87\x50\x66\x29\xb8\x94\x80\xb4\x4b\x41\x39\x9a\x38\x3b\x16\x13\x4f\x94\xf1\x5e\xa2\x28\xef\x8e\xb2\x29\x40\xa2\xa0\xb2\x8f\xbe\xe3\x63\xd9\xd3\x04\x0d\xb5\x2c\x04\x18\xc8\x35\x34\x20\x94\xf3\x5c\xd4\xff\x1e\x5f\x1f\x76\x1f\x6f\x4f\x10\xb4\x8b\x9b\xa2\x5e\x0a\x44\x27\x7b\x8b\x24\xb8\x29\x00\xea\xc5\xbf\x34\x00\x75\x47\xea\xc0\x07\x37\x64\x52\x8b\xef\xbb\xe7\xf2\x16\xc1\xfc\x84\xe2\x3a\xb2\x78\x64\x3a\xf5\x69\x50\x04\x9f\x44\x49\xd4\xe2\x89\x1b\x0d\xb6\xa1\x23\x7b\x2a\x2f\xe2\x0a\x58\x58\xd9\xc5\x32\x7b\x17\xc9\xde\x54\xd7\xdf\x61\xca\x1a\x69\xb3\xed\xdd\x41\x53\x3b\xd6\x66\xd5\x2b\x8b\x2c\x9f\x10\x06\x6a\x2d\x06\xd5\x3e\xdf\x19\xd3\x26\xd1\x5c\xed\x53\xda\x47\x72\x3d\xe7\xca\xa7\xce\xf8\x9c\xef\x5b\xd7\x71\x1c\xed\xcb\x41\x58\xd3\xff\xad\x93\x8c\x30\x50\xb4\x98\x75\x8c\x94\x03\x91\x22\xe8\xd8\x93\x45\xa5\xb3\x2e\x33\xf8\x7b\x8d\xc9\xea\x94\xfd\x42\x0d\x4b\x43\xe7\x6a\xf1\xfd\x19\x74\x39\xa6\x36\xeb\x03\xa7\xa9\x04\x92\x06\xe6\xb9\xf8\x0a\x00\x00\xff\xff\x36\x5e\xf5\xfc\x8d\x01\x00\x00")

func templatesPartialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderHtml,
		"templates/partials/header.html",
	)
}

func templatesPartialsHeaderHtml() (*asset, error) {
	bytes, err := templatesPartialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.html", size: 397, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x6c, 0xdb, 0x55, 0xb0, 0xc9, 0x63, 0x8, 0xa2, 0x78, 0x32, 0x5b, 0xf6, 0xa4, 0x84, 0x6b, 0xf6, 0x48, 0x31, 0xbb, 0x32, 0x6f, 0xbf, 0x86, 0x8c, 0xa8, 0xf6, 0x97, 0x97, 0xdc, 0xbc, 0x37}}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcd\x6a\xe3\x30\x10\xbe\xe7\x29\x3e\x74\x8f\x45\xee\xb2\x61\xd9\xbd\x2c\x94\xb6\xd0\xf4\x01\x64\x6b\x5c\x8b\xc8\x92\x91\xe5\xd0\x20\xf4\xee\xc5\xb2\x9d\x38\xd0\x9b\x98\x99\xef\x67\x3e\x4d\x8c\x50\xd4\x6a\x4b\x60\x83\x91\x37\xa3\xc7\xc0\x70\x4c\xe9\x10\x23\x02\xf5\x83\x91\x81\xc0\x3a\x92\x8a\x3c\x43\x4a\x07\x40\xd4\x4e\xdd\xaa\x03\x00\x88\xee\x54\xc5\x88\xe2\x55\xf6\x84\x94\x04\xef\x4e\x4b\x23\x46\xe8\x16\xc5\x8b\xb6\x97\xcc\x96\x87\x25\x3a\x4f\x6d\xc9\x66\x44\xee\xa4\xc4\xaa\xfc\x08\x0e\x9b\xba\xe0\x72\xa3\x38\x82\xcc\x48\x0f\x7c\xeb\x7c\x0f\xd9\x04\xed\x6c\xc9\xb8\x6c\x1a\x37\xd9\x30\xf2\x99\xee\x73\x24\xff\xff\x1f\x52\xe2\x1b\xcf\x52\x5f\x8d\x31\xf4\x14\x3a\xa7\x4a\xf6\xfe\xf6\x71\x66\x0f\x01\x2f\xed\x17\xa1\x38\x7b\xd9\x5c\x46\xac\x42\x80\x50\xfa\x5a\xad\x6f\x40\x68\x3b\x4c\x01\xe1\x36\x50\xc9\x9a\x8e\x9a\x4b\xed\xbe\x19\xb4\x5a\x56\xc9\xba\x0c\x56\xf6\xf4\x54\xb8\x4a\x33\x3d\x57\x32\x96\x14\xdf\x51\x1b\x59\x93\x41\xeb\xfc\x7e\x70\x9f\x29\x8e\x73\x98\xc5\x1f\x1f\xe6\xa5\x72\xc8\x19\xb3\x71\x08\x7e\xf7\x9a\x13\xb3\x6a\xb7\xc6\xde\xf8\x38\xd5\xbd\x0e\x77\x5b\x7f\x3d\xc9\x40\x0c\xab\x19\xc1\xe7\x74\x7f\xe1\x11\x7c\xf9\xee\xa7\x7b\x68\x9d\x0b\xeb\x3d\xec\x86\x7f\x02\x00\x00\xff\xff\xd2\x40\x4c\x81\x4c\x02\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 588, mode: os.FileMode(0644), modTime: time.Unix(1234567890, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xd7, 0xff, 0xea, 0xb, 0x2a, 0x17, 0x8a, 0x30, 0x46, 0xc6, 0xa5, 0x5e, 0xb4, 0xcc, 0x33, 0xb5, 0xed, 0x47, 0x41, 0xc9, 0xa, 0x7f, 0x7e, 0xc7, 0x8e, 0xe6, 0x7b, 0x2c, 0xce, 0x58, 0x98}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/account.html":         templatesAccountHtml,
	"templates/error.html":           templatesErrorHtml,
	"templates/index.html":           templatesIndexHtml,
	"templates/partials/footer.html": templatesPartialsFooterHtml,
	"templates/partials/header.html": templatesPartialsHeaderHtml,
	"templates/playlist.html":        templatesPlaylistHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"account.html": &bintree{templatesAccountHtml, map[string]*bintree{}},
		"error.html":   &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html":   &bintree{templatesIndexHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{templatesPartialsFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{templatesPartialsHeaderHtml, map[string]*bintree{}},
		}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
